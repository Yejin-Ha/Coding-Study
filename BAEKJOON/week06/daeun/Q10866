
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.Deque;
/*
push_front X: 정수 X를 덱의 앞에 넣는다.
push_back X: 정수 X를 덱의 뒤에 넣는다.
pop_front: 덱의 가장 앞에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
pop_back: 덱의 가장 뒤에 있는 수를 빼고, 그 수를 출력한다. 만약, 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 덱에 들어있는 정수의 개수를 출력한다.
empty: 덱이 비어있으면 1을, 아니면 0을 출력한다.
front: 덱의 가장 앞에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
back: 덱의 가장 뒤에 있는 정수를 출력한다. 만약 덱에 들어있는 정수가 없는 경우에는 -1을 출력한다.
 */

public class Q10866 {
	public static void main(String[] args) throws IOException {
		Deque<String> deque = new ArrayDeque<>();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int size = Integer.parseInt(st.nextToken());

		for (int i = 0; i < size; i++) {
			st = new StringTokenizer(br.readLine());
			switch (st.nextToken()) {
			case "push_front":
				deque.addFirst(st.nextToken());
				break;
			case "push_back":
				deque.addLast(st.nextToken());
				break;
			case "pop_front":
				System.out.println((deque.isEmpty()) ? -1 : deque.pollFirst());
				break;
			case "pop_back":
				System.out.println((deque.isEmpty()) ? -1 : deque.pollLast());
				break;
			case "size":
				System.out.println(deque.size());
				break;
			case "empty":
				System.out.println((deque.isEmpty()) ? 1 : 0);
				break;
			case "front":
				System.out.println((deque.isEmpty()) ? -1 : deque.getFirst());
				break;
			case "back":
				System.out.println((deque.isEmpty()) ? -1 : deque.getLast());
				break;
			}
		}
	}
}
